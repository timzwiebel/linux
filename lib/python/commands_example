#!/usr/bin/python
#
# An example script demonstrating typical usage of commands.py

from argparse import ArgumentParser, Namespace

from commands import BaseCommandSequenceStep, CommandSequenceProgram


class HelloWorldStep(BaseCommandSequenceStep):
  # TODO(timzwiebel): Add @override when it becomes available in Python 3.12
  def _run(self, args: Namespace) -> None:
    self._run_command('Print "Hello"', 'echo \'Hello\'')
    self._run_command('Print "World!"', 'echo \'World!\'')


class PrintWelcomeMessageStep(BaseCommandSequenceStep):
  def __init__(self):
    super().__init__('1')

  # TODO(timzwiebel): Add @override when it becomes available in Python 3.12
  def _add_args(self, argument_parser: ArgumentParser) -> None:
    argument_parser.add_argument(
        '-n',
        '--name',
        required=True,
        help=f'your name (required)')

  # TODO(timzwiebel): Add @override when it becomes available in Python 3.12
  def _run(self, args: Namespace) -> None:
    self._run_command(
        'Print a welcome message',
        f'echo \'Welcome {args.name}!\'')


class PrintValuesStep(BaseCommandSequenceStep):
  def __init__(self):
    super().__init__('2', 'Print the values')

  # TODO(timzwiebel): Add @override when it becomes available in Python 3.12
  def _add_args(self, argument_parser: ArgumentParser) -> None:
    default_string_value = 'foo'
    argument_parser.add_argument(
        '--string-value',
        default=default_string_value,
        help=f'set the string value (default: {default_string_value})')

    default_int_value = 42
    argument_parser.add_argument(
        '--int-value',
        default=default_int_value,
        type=int,
        help=f'set the int value (default: {default_int_value})')

    argument_parser.add_argument(
        '--bool-flag',
        action='store_true',
        help=f'set the boolean flag')

  # TODO(timzwiebel): Add @override when it becomes available in Python 3.12
  def _run(self, args: Namespace) -> None:
    self._run_command(
        'Print the string value',
        f'echo \'The string value is "{args.string_value}"\'')
    self._run_command(
        'Print the int value',
        f'echo \'The int value is {args.int_value}\'')
    if args.bool_flag:
      self._run_command(
          'Print that the bool flag is set',
          f'echo \'The bool flag is set!\'')
    else:
      self._run_command(
          'Print that the bool flag is NOT set',
          f'echo \'The bool flag is NOT set!\'')


class PrintGoodbyeMessageStep(BaseCommandSequenceStep):
  def __init__(self):
    super().__init__(step_description='Say goodbye')

  # TODO(timzwiebel): Add @override when it becomes available in Python 3.12
  def _run(self, args: Namespace) -> None:
    self._run_command('Print a goodbye message', 'echo \'Bye!\'')


class InvalidStep(BaseCommandSequenceStep):
  def __init__(self):
    super().__init__(None, 'This step failed to override the _run method')


def main():
  program = CommandSequenceProgram(
      'An example script demonstrating typical usage of commands.py',
      [
        HelloWorldStep(),
        PrintWelcomeMessageStep(),
        PrintValuesStep(),
        PrintGoodbyeMessageStep(),
        # InvalidStep(),
      ])
  program.run()


main()
