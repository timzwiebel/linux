#!/usr/bin/env python3
#
# Print info about disk devices, partitions, and filesystems.

import argparse
import json
import subprocess
from typing import Any, TypeVar


_T = TypeVar('_T')


_INDENTATION = 2


def _strip_json_strings(obj: _T) -> _T:
  if isinstance(obj, dict):
    return {
      _strip_json_strings(k): _strip_json_strings(v) for k, v in obj.items()
    }
  elif isinstance(obj, list):
    return [_strip_json_strings(i) for i in obj]
  elif isinstance(obj, str):
    return obj.strip()
  else:
    return obj


def _print_line(line: str, indentation: int) -> None:
  print((indentation * ' ') + line)


def _print_info(info: list[tuple[str, str]], indentation: int) -> None:
  width = max([len(line[0]) for line in info])
  for line in info:
    print((indentation * ' ') + f'{line[0]:{width}}: {line[1]}')


def _print_device_info(data: dict[Any], indentation: int) -> None:
  _print_line('Device:', indentation)
  _print_info(
      [
        ('NAME', f'{data['name']}'),
        ('TRAN / TYPE', f'{data['tran']} / {data['type']}'),
        (
          'VENDOR / MODEL / SERIAL',
          f'{data['vendor']} / {data['model']} / {data['serial']}',
        ),
        ('STATE', f'{data['state']}'),
        ('RM (removable)', f'{data['rm']}'),
        ('RO (read-only)', f'{data['ro']}'),
        ('MODE OWNER GROUP', f'{data['mode']} {data['owner']} {data['group']}'),
        ('SIZE', f'{data['size']}'),
        ('PTUUID', f'{data['ptuuid']}'),
        ('PTTYPE', f'{data['pttype']}'),
      ],
      indentation + _INDENTATION)
  _print_filesystem_info(data, indentation + _INDENTATION)


def _print_partition_info(data: dict[Any], indentation: int) -> None:
  _print_line('Partition:', indentation)
  _print_info(
      [
        ('NAME', f'{data['name']}'),
        ('PARTLABEL', f'{data['partlabel']}'),
        ('PARTUUID', f'{data['partuuid']}'),
        ('PARTTYPENAME', f'{data['parttypename']}'),
        ('SIZE', f'{data['size']}'),
      ],
      indentation + _INDENTATION)
  _print_filesystem_info(data, indentation + _INDENTATION)


def _print_filesystem_info(data: dict[Any], indentation: int) -> None:
  if data['fstype'] is None:
    return
  _print_line('Filesystem:', indentation)
  _print_info(
      [
        ('LABEL', f'{data['label']}'),
        ('UUID', f'{data['uuid']}'),
        ('FSTYPE', f'{data['fstype']}'),
        ('FSAVAIL', f'{data['fsavail']}'),
        ('FSUSED', f'{data['fsused']}'),
        ('FSSIZE', f'{data['fssize']}'),
        ('FSUSE%', f'{data['fsuse%']}'),
      ],
      indentation + _INDENTATION)


def main(args: argparse.Namespace) -> None:
  completed_process = subprocess.run(
      ['/usr/bin/env', 'lsblk', '--json', '--output-all'],
      text=True,
      stdout=subprocess.PIPE,
      stderr=subprocess.STDOUT,
      check=True)
  lsblk_data = _strip_json_strings(json.loads(completed_process.stdout))
  for device in lsblk_data['blockdevices']:
    _print_device_info(device, indentation=0)
    if 'children' in device:
      for partition in device['children']:
        _print_partition_info(partition, indentation=_INDENTATION)


if __name__ == '__main__':
  arg_parser = argparse.ArgumentParser(
      description='Print info about disk devices, partitions, and filesystems.')
  args = arg_parser.parse_args()
  main(args)
