#!/usr/bin/env python3
#
# Print info about disk devices, partitions, and filesystems.

import argparse
import json
import subprocess
from typing import Any, TypeVar


_T = TypeVar('_T')


def _strip_json_strings(obj: _T) -> _T:
  if isinstance(obj, dict):
    return {
      _strip_json_strings(k): _strip_json_strings(v) for k, v in obj.items()
    }
  elif isinstance(obj, list):
    return [_strip_json_strings(i) for i in obj]
  elif isinstance(obj, str):
    return obj.strip()
  else:
    return obj


def _print_line(line: str, indentation: int = 0) -> None:
  print((indentation * ' ') + line)


def _print_columns(output: list[tuple[str, str]], indentation: int = 0) -> None:
  width_0 = max([len(line[0]) for line in output])
  width_1 = max([len(line[1]) for line in output])
  for line in output:
    print((indentation * ' ') + f'{line[0]:<{width_0}}: {line[1]:<{width_1}}')


def main(args: argparse.Namespace) -> None:
  completed_process = subprocess.run(
      ['/usr/bin/env', 'lsblk', '--json', '--output-all'],
      text=True,
      stdout=subprocess.PIPE,
      stderr=subprocess.STDOUT,
      check=True)
  lsblk_data = _strip_json_strings(json.loads(completed_process.stdout))
  for device in lsblk_data['blockdevices']:
    _print_line('Device:', indentation=0)
    output = []
    output.append(('NAME', f'{device['name']}'))
    output.append(('TRAN / TYPE', f'{device['tran']} / {device['type']}'))
    output.append(('VENDOR / MODEL', f'{device['vendor']} / {device['model']}'))
    output.append(('SERIAL', f'{device['serial']}'))
    output.append(('STATE', f'{device['state']}'))
    output.append(('RM (removable)', f'{device['rm']}'))
    output.append(('RO (read-only)', f'{device['ro']}'))
    output.append((
      'OWNER GROUP MODE',
      f'{device['owner']} {device['group']} {device['mode']}',
    ))
    output.append(('SIZE', f'{device['size']}'))
    output.append(('PTUUID', f'{device['ptuuid']}'))
    output.append(('PTTYPE', f'{device['pttype']}'))
    _print_columns(output, indentation=2)
    if 'children' in device:
      for partition in device['children']:
        _print_line('Partition:', indentation=2)
        output = []
        output.append(('NAME', f'{partition['name']}'))
        output.append(('PARTTYPENAME', f'{partition['parttypename']}'))
        output.append(('PARTLABEL', f'{partition['partlabel']}'))
        output.append(('PARTUUID', f'{partition['partuuid']}'))
        output.append(('SIZE', f'{partition['size']}'))
        output.append(('LABEL', f'{partition['label']}'))
        output.append(('UUID', f'{partition['uuid']}'))
        output.append(('FSTYPE', f'{partition['fstype']}'))
        output.append((
          'OWNER GROUP MODE',
          f'{partition['owner']} {partition['group']} {partition['mode']}',
        ))
        output.append(('FSAVAIL', f'{partition['fsavail']}'))
        output.append(('FSUSED', f'{partition['fsused']}'))
        output.append(('FSSIZE', f'{partition['fssize']}'))
        output.append(('FSUSE%', f'{partition['fsuse%']}'))
        _print_columns(output, indentation=4)


if __name__ == '__main__':
  arg_parser = argparse.ArgumentParser(
      description='Print info about disk devices, partitions, and filesystems.')
  args = arg_parser.parse_args()
  main(args)
